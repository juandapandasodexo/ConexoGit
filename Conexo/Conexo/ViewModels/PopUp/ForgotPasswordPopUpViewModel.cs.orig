using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Threading.Tasks;
using System.Windows.Input;
using AppQuo.Classes;
using AppQuo.Classes.Helpers;
using AppQuo.Views.PopUp;
using Domain.Models;
using Domain.Models.Request;
using Domain.Models.Response;
using Infraestructure.Networking;
using Rg.Plugins.Popup.Services;
using Xamarin.Forms;

namespace AppQuo.ViewModels.PopUp
{
    public class ForgotPasswordPopUpViewModel : INotifyPropertyChanged
    {

        #region Events
        public event PropertyChangedEventHandler PropertyChanged;
        #endregion


        #region Attributes
        private MainViewModel SelfMainViewModel;
<<<<<<< HEAD
=======

        private DocumentTypeModel documentTypeModel;
        private DocumentTypeFieldsModel documentTypeSelected;
        private List<DocumentTypeFieldsModel> listDocumentTypes;

        private string user;
        private string noDocument;
        private string email;
>>>>>>> develop
        private bool isEnabled;
        private bool isRunning;

        private ForgotPasswordResponseModel forgotPasswordResponseModel;
        #endregion


        #region Properties
<<<<<<< HEAD
=======
        public string User
        {
            get
            {
                return this.user;
            }
            set
            {
                if (this.user != value)
                {
                    this.user = value;
                    PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(nameof(User)));
                }
            }
        }

        public DocumentTypeModel DocumentTypeModel
        {
            get
            {
                return this.documentTypeModel;
            }
            set
            {
                if (this.documentTypeModel != value)
                {
                    this.documentTypeModel = value;
                    PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(nameof(DocumentTypeModel)));
                }
            }
        }
>>>>>>> develop

        private string _user;
        public string User
        {
            get
            {
                return this._user;
            }
            set
            {
                if (this._user != value)
                {
                    this._user = value;
                    PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(nameof(User)));
                }
            }
        }

        public bool IsEnabled
        {
            get
            {
                return this.isEnabled;
            }
            set
            {
                if (this.isEnabled != value)
                {
                    this.isEnabled = value;
                    PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(nameof(IsEnabled)));
                }
            }
        }

        public bool IsRunning
        {
            get
            {
                return this.isRunning;
            }
            set
            {
                if (this.isRunning != value)
                {
                    this.isRunning = value;
                    PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(nameof(IsRunning)));
                }
            }
        }
        #endregion


        #region Constructors
        public ForgotPasswordPopUpViewModel()
        {
            SelfMainViewModel = MainViewModel.GetInstance();
            this.IsEnabled = true;
        }
        #endregion


        #region Methods

        public async Task DestroyThisModalAsync()
        {
            this.IsEnabled = true;
            await PopupNavigation.PopAsync();
        }
        #endregion


        #region Commands
        public ICommand ConfirmTapCommand { 
            get { 
                return new Command(ConfirmTap); 
            } 
        }

        public async void ConfirmTap()
        {
            if (!this.IsEnabled)
            {
                return;
            }

            this.IsEnabled = false;
            this.IsRunning = true;


            var forgotPasswordRequestModel = new ForgotPasswordRequestModel(){ usuario = this.User };

            try
            {
                forgotPasswordResponseModel = await App.Services.LoginService.ForgotPassword(forgotPasswordRequestModel);
                await DestroyThisModalAsync();
                await MessageHelper.ShowSuccessMessage(forgotPasswordResponseModel.Descripcion);

            }
            catch (Exception ex)
            {
                await MessageHelper.HandleException(ex);

            }finally{
                
                this.IsEnabled = true;
                this.IsRunning = false;

            }

        }

        public ICommand CancelTapCommand { get { return new Command(CancelTap); } }
        public void CancelTap()
        {
            if (!this.IsEnabled)
            {
                return;
            }
            this.IsEnabled = false;

            DestroyThisModalAsync();
        }
        #endregion
    }
}
