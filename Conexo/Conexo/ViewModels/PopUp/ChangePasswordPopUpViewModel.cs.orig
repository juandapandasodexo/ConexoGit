using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Threading.Tasks;
using System.Windows.Input;
using AppQuo.Classes;
using AppQuo.Classes.Helpers;
using AppQuo.Views.PopUp;
using Domain.Models;
using Domain.Models.Request;
using Domain.Models.Response;
using Infraestructure.Networking;
using Rg.Plugins.Popup.Services;
using Xamarin.Forms;

namespace AppQuo.ViewModels.PopUp
{
    public class ChangePasswordPopUpViewModel : INotifyPropertyChanged
    {
        
        #region Events
        public event PropertyChangedEventHandler PropertyChanged;
        #endregion


        #region Attributes
        private MainViewModel SelfMainViewModel;

<<<<<<< HEAD
        private string userName;
=======
        private DocumentTypeModel documentTypeModel;
        private DocumentTypeFieldsModel documentTypeSelected;
        private List<DocumentTypeFieldsModel> listDocumentTypes;

        private string user;
        private string noDocument;
>>>>>>> develop
        private string currentPassword;
        private string newPassword;
        private string confirmNewPassword;
        private bool isEnabled;
        private bool isRunning;
        #endregion


        #region Properties
<<<<<<< HEAD
=======
        public string User
        {
            get
            {
                return this.user;
            }
            set
            {
                if (this.user != value)
                {
                    this.user = value;
                    PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(nameof(User)));
                }
            }
        }

        public DocumentTypeModel DocumentTypeModel
        {
            get
            {
                return this.documentTypeModel;
            }
            set
            {
                if (this.documentTypeModel != value)
                {
                    this.documentTypeModel = value;
                    PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(nameof(DocumentTypeModel)));
                }
            }
        }
>>>>>>> develop


        public string UserName
        {
            get => this.userName;
            set{
                if (this.userName!= value)
                {
                    this.userName = value;
                    PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(nameof(UserName)));
                }
            }
        }

        public string CurrentPassword
        {
            get => this.currentPassword;
            set
            {
                if (this.currentPassword != value)
                {
                    this.currentPassword = value;
                    PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(nameof(CurrentPassword)));
                }
            }
        }

        public string NewPassword
        {
            get => this.newPassword;
            set
            {
                if (this.newPassword != value)
                {
                    this.newPassword = value;
                    PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(nameof(NewPassword)));
                }
            }
        }

        public string ConfirmNewPassword
        {
            get => this.confirmNewPassword;
            set
            {
                if (this.confirmNewPassword != value)
                {
                    this.confirmNewPassword = value;
                    PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(nameof(ConfirmNewPassword)));
                }
            }
        }

        public bool IsEnabled
        {
            get => this.isEnabled;
            set
            {
                if (this.isEnabled != value)
                {
                    this.isEnabled = value;
                    PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(nameof(IsEnabled)));
                }
            }
        }

        public bool IsRunning
        {
            get => this.isRunning;
            set
            {
                if (this.isRunning != value)
                {
                    this.isRunning = value;
                    PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(nameof(IsRunning)));
                }
            }
        }


        #endregion


        #region Constructors
        public ChangePasswordPopUpViewModel()
        {
            SelfMainViewModel = MainViewModel.GetInstance();
            this.IsEnabled = true;
            this.IsRunning = false;
        }
        #endregion


        #region Methods

        public async void DestroyThisModalAsync()
        {
            this.IsEnabled = true;
            this.IsRunning = false;
            await PopupNavigation.PopAsync();
        }
        #endregion


        #region Commands
        public ICommand ConfirmTapCommand { get { return new Command(ConfirmTap); } }
        public async void ConfirmTap()
        {
            if (this.IsEnabled==false)
            {
                return;
            }


            this.IsEnabled = false;
            this.IsRunning = true;



            if (string.IsNullOrEmpty(this.UserName))
            {
                await MessageHelper.ShowErrorMessage(App.Current.Resources["UserNameValidation"].ToString());
                this.IsEnabled = true;
                this.IsRunning = false;
                return;
            }

            if (string.IsNullOrEmpty(this.CurrentPassword))
            {
                await MessageHelper.ShowErrorMessage(App.Current.Resources["CurrentPasswordValidation"].ToString());
                this.IsEnabled = true;
                this.IsRunning = false;
                return;
            }

            if (string.IsNullOrEmpty(this.NewPassword))
            {
                await MessageHelper.ShowErrorMessage(App.Current.Resources["NewPasswordValidation"].ToString());
                this.IsEnabled = true;
                this.IsRunning = false;
                return;
            }

            if (string.IsNullOrEmpty(this.ConfirmNewPassword))
            {
                await MessageHelper.ShowErrorMessage(App.Current.Resources["ConfirmNewPasswordValidation"].ToString());
                this.IsEnabled = true;
                this.IsRunning = false;
                return;
            }


            if(this.ConfirmNewPassword!=this.NewPassword){
                await MessageHelper.ShowErrorMessage(App.Current.Resources["SamePasswordValidation"].ToString());
                this.IsEnabled = true;
                this.IsRunning = false;
                return;
            }

            try
            {
                ChangePasswordRequestModel model = new ChangePasswordRequestModel();
                model.contraseniaActual = this.CurrentPassword;
                model.contraseniaNueva = this.NewPassword;
                model.usuario = this.UserName;
                var change = await App.Services.LoginService.ChangePassword(model);
                DestroyThisModalAsync();
                await MessageHelper.ShowSuccessMessage(App.Current.Resources["SuccessChangingPassword"].ToString());

            }catch(Exception ex)
            {
                await MessageHelper.HandleException(ex);
            }finally{
                this.IsEnabled = true;
                this.IsRunning = false;
            }

        }

        public ICommand CancelTapCommand { get { return new Command(CancelTap); } }
        public void CancelTap()
        {
            if (this.IsEnabled==false)
            {
                return;
            }

            this.IsEnabled = false;
            DestroyThisModalAsync();
            this.IsEnabled = true;
        }
        #endregion

    }

}
